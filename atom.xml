<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>时砾逐光</title>
  
  <subtitle>愿前路无止境</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-18T00:43:52.688Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Hiroshi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据库笔记</title>
    <link href="http://example.com/2022/10/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/10/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/</id>
    <published>2022-10-17T02:45:16.000Z</published>
    <updated>2022-10-18T00:43:52.688Z</updated>
    
    <content type="html"><![CDATA[<h4 id="跟着PHP课程重新记录一下MySQL的笔记"># 跟着PHP课程重新记录一下MySQL的笔记</h4><h4 id="1-数据库操作：">1.数据库操作：</h4><ul><li>创建数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database 数据库名;</span><br><span class="line">create database 数据库名 charset=字符集;   #设定默认字符集</span><br><span class="line">create database 数据库名 default character set 字符集;   #设定默认字符集</span><br></pre></td></tr></table></figure><ul><li>删除数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database 数据库名;</span><br></pre></td></tr></table></figure><ul><li>使用数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure><ul><li>查询当前正在使用的数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select database();</span><br></pre></td></tr></table></figure><ul><li>设置数据库字符集</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-数据表操作">2.数据表操作</h4><ul><li>创建表</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名 (字段名 字段类型 [NOT NULL]);</span><br></pre></td></tr></table></figure><ul><li>查询数据库的表格个数</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 第一种写法</span><br><span class="line">show tables from 数据库名;</span><br><span class="line"></span><br><span class="line"># 第二种写法,如果已经选择了使用的数据库则可以直接</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure><ul><li>修改表名</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rename table 旧表名 to 新表名;</span><br></pre></td></tr></table></figure><ul><li>查看表格的详细信息</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table 表名;</span><br></pre></td></tr></table></figure><ul><li>查看字段</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc 表名;</span><br></pre></td></tr></table></figure><ul><li>插入数据</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 两种写法into都可以省略</span><br><span class="line">insert into 表名 values(数据1, 数据2...) (数据1, 数据2...) # 可同时插入多组数据</span><br><span class="line">insert into 表名 (字段1,字段2...) values (数据1, 数据2...) # 这种写法可以跳过部分字段</span><br></pre></td></tr></table></figure><ul><li>查询</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 字段1,字段2 from 表名 [where...][limit n][offset m]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;跟着PHP课程重新记录一下MySQL的笔记&quot;&gt;# 跟着PHP课程重新记录一下MySQL的笔记&lt;/h4&gt;
&lt;h4 id=&quot;1-数据库操作：&quot;&gt;1.数据库操作：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;创建数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlig</summary>
      
    
    
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-GitHub搭建教程</title>
    <link href="http://example.com/2022/10/16/Hexo-Github%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <id>http://example.com/2022/10/16/Hexo-Github%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</id>
    <published>2022-10-16T07:56:22.000Z</published>
    <updated>2022-10-17T00:07:24.053Z</updated>
    
    <content type="html"><![CDATA[<h4 id="注意事项">#注意事项</h4><p>默认已有git基础且本机已连接GitHub</p><h4 id="1-创建GitHub-Pages-仓库">1.创建GitHub Pages 仓库</h4><ul><li>在GitHub主页右上角点击+号，再点击New repository创建仓库。</li><li>接着在Repository name内输入[你的用户名].github.io</li><li>点击Create repository就创建成功</li></ul><p>创建成功后博客地址为：<code>https://[你的用户名].github.io</code></p><h4 id="2-本地安装Hexo程序">2.本地安装Hexo程序</h4><ul><li>安装Node.js,一路next即可</li></ul><blockquote><p>Node.js：<a href="https://link.zhihu.com/?target=https%3A//nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></p></blockquote><ul><li><p>使用指令<code>npm install -g hexo-cli</code>安装 ,mac用户需要在指令前加上<code>sudo</code>,这一步请耐心等待</p></li><li><p>在本地新建一个用于存放博客文件的文件夹，例如blog文件夹，在此文件夹进入Git Bash</p></li><li><p>初始化博客文件并安装组件</p></li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo init      # 初始化</span><br><span class="line">npm install    # 安装组件</span><br></pre></td></tr></table></figure><ul><li>完成后便可以在本地进行预览了（输入指令后不要关闭窗口）</li></ul><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">hexo g       <span class="params">#</span> 生成页面  </span><br><span class="line">hexo s       <span class="params">#</span> 启动预览</span><br></pre></td></tr></table></figure><ul><li>在浏览器中输入<code>localhost:4000</code>进行预览，出现Hexo的默认页面则本地博客安装成功！</li><li>如果无法预览则可能是端口被占用，可以找出占用端口的程序并关闭，或者也可以修改Hexo启动的端口,这里改为5000端口</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo s -p 5000</span><br></pre></td></tr></table></figure><h4 id="3-部署-Hexo-到-GitHub-Pages">3.部署 Hexo 到 GitHub Pages</h4><ul><li>安装 hexo-deployer-git</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ul><li>修改<b>_config.yml</b>文件末尾的 Deployment 部分，修改成如下</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><ul><li>运行<code>hexo d</code>部署网站，成功后便可以在<code>https://用户名.github.io</code>看到自己的博客了</li></ul><p>更新中······</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;注意事项&quot;&gt;#注意事项&lt;/h4&gt;
&lt;p&gt;默认已有git基础且本机已连接GitHub&lt;/p&gt;
&lt;h4 id=&quot;1-创建GitHub-Pages-仓库&quot;&gt;1.创建GitHub Pages 仓库&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在GitHub主页右上角点击+号，再点击New</summary>
      
    
    
    
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>二分总结</title>
    <link href="http://example.com/2022/01/07/%E4%BA%8C%E5%88%86%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2022/01/07/%E4%BA%8C%E5%88%86%E6%80%BB%E7%BB%93/</id>
    <published>2022-01-07T09:31:37.000Z</published>
    <updated>2022-10-17T15:25:29.267Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序">序</h3><p>以前学习二分的时候一直没有搞清楚什么时候$mid = (left + right) / 2$，什么时候$mid = (left + right + 1) / 2$，更新的时候是$right = mid + 1$还是$right = mid - 1$，但是一直迷迷糊糊的也能写对题，后面也没有多管。这个寒假重新学一遍基础算法，才明白为什么会有这两种情况。</p><h3 id="整数二分的两种情况">整数二分的两种情况</h3><p><strong>第一种 $mid=(right+left+1)/2$</strong><br>这种情况代码如下</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid))</span><br><span class="line">            l = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>为什么$mid$需要补上一个$1$呢？</p><blockquote><p>因为整数的除法是向下取整，我们需要在运算时+1时它变成向上取整，否则的话会因为边界问题导致while无限循环。<br>举个例子，在区间只有两个数的时候，比如$l=3，r=4，mid=(3+4)/2=3$，这时候如果check成功，那么会执行$l=mid$，然后问题就来了，$l$和$mid$本来就都等于3，然后就会无限循环下去，$l$和$mid$的值永远不会更新。所以在$l=mid,r=mid-1$的更新方式下，我们需要将运算时$mid+1$成为向上取整才不会死循环。</p></blockquote><p><strong>第二种 $mid=(right+left)/2$</strong><br>这种情况代码如下</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid))</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>为什么$mid$在这里不需要补上一个$1$呢？</p><blockquote><p>因为边界问题不会影响到值的更新，还是用上面那个例子，$l=3，r=4，mid=(3+4)/2=3$。<br>此时如果check成功，那么$l=mid+1=4$，更新成功。如果check失败，则$r= mid=3$，同样更新成功。由此可以看出，在$l=mid+1,r=mid$的更新方式下，不需要对$mid$进行任何操作。</p></blockquote><p>以上是整数二分的两种固定写法。那么什么时候用哪种方法呢，这就要根据具体的题目进行分析了。</p><hr><h3 id="例题——-分巧克力">例题—— <a href="https://www.acwing.com/problem/content/1229/">分巧克力</a></h3><p><strong>题目描述</strong></p><blockquote><p>儿童节那天有 K 位小朋友到小明家做客。<br>小明拿出了珍藏的巧克力招待小朋友们。<br>小明一共有 N 块巧克力，其中第 i 块是 Hi×Wi 的方格组成的长方形。<br>为了公平起见，小明需要从这 N 块巧克力中切出 K 块巧克力分给小朋友们。<br>切出的巧克力需要满足：<br>形状是正方形，边长是整数<br>大小相同<br>例如一块 6×5 的巧克力可以切出 6 块 2×2 的巧克力或者 2 块 3×3 的巧克力。<br>当然小朋友们都希望得到的巧克力尽可能大，你能帮小明计算出最大的边长是多少么？</p></blockquote><p><strong>输入格式</strong></p><blockquote><p>第一行包含两个整数 N 和 K。<br>以下 N 行每行包含两个整数 $H_i$ 和 $W_i$。<br>输入保证每位小朋友至少能获得一块 $1×1$ 的巧克力。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>输出切出的正方形巧克力最大可能的边长。</p></blockquote><p><strong>输入输出样例</strong></p><blockquote><p><strong>输入#1</strong><br>2 10<br>6 5<br>5 6</p><p><strong>输出#1</strong><br>2</p><p><strong>AC代码</strong></p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS ios::sync_with_stdio(false), cin.tie(0), cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max(a, b) (a &gt; b ? a : b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> min(a, b) (a &lt; b ? a : b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> h[N], w[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt += (h[i] / x) * (w[i] / x);</span><br><span class="line">        <span class="keyword">if</span> (cnt &gt;= k)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; h[i] &gt;&gt; w[i];</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = N;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid))</span><br><span class="line">            l = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; l &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目很简单是二分的板子题，主要是说为什么要用<strong>第一种</strong>求$mid$方法呢。<br>为什么二分里面不能写成</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid))</span><br><span class="line">            l = mid + <span class="number">1</span>;        <span class="comment">//这样写跑样例答案是3</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid;</span><br></pre></td></tr></table></figure><blockquote><p>推导一遍发现，如果$check$成立后，说明当前的$mid$值也是在答案范围中，所以答案只能在$[mid,<br>r]$之中取。理所当然无法用上面那种写法，如果用上面那种方法，$l$会直接更新成$mid+1$，会越过$mid$这个值，所以在一些情况就会出现错误，比如题面的样例$l$就会成为$2+1=3$，越过了$2$这个可能的答案值，恰好$2$就是最大的一个答案，导致答案错误。</p></blockquote><hr><h3 id="总结">总结</h3><p>这次弄明白了二分的写法属实是不易，<s>留文一篇防止日后遗忘</s><br><strong>以后写二分的时候记得注意一下区间情况</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;序&quot;&gt;序&lt;/h3&gt;
&lt;p&gt;以前学习二分的时候一直没有搞清楚什么时候$mid = (left + right) / 2$，什么时候$mid = (left + right + 1) / 2$，更新的时候是$right = mid + 1$还是$right = mid</summary>
      
    
    
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
